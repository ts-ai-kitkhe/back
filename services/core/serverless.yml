service: core

package:
  individually: true

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs16.x
  versionFunctions: false
  httpApi:
    cors: true
    authorizers:
      adminJWTAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_A5u5syC5t
        audience:
          - 4htkustm5ob7lqd45n0ovff66e
  iam:
    role:
      statements:
        - Effect: "Allow"
          Resource:
            - "arn:aws:s3:::assets.ts-ai-kitkhe.ge"
            - "arn:aws:s3:::assets.ts-ai-kitkhe.ge/*"
          Action: "s3:*"
        - Effect: "Allow"
          Resource:
            - Fn::GetAtt: [booksTable, Arn]
            - Fn::GetAtt: [pagesTable, Arn]
          Action: "dynamodb:*"

custom:
  # Dynamo DBs
  DYNAMO_DB_BOOKS_TABLE_NAME: books
  DYNAMO_DB_PAGES_TABLE_NAME: pages
  S3_ASSETS_BUCKET_NAME: assets.ts-ai-kitkhe.ge
  # Plugins
  bundle:
    sourcemaps: false # Enable source maps
    linting: false # Disable linting
    caching: false # Enable Webpack caching
    concurrency: 2 # Set desired concurrency, defaults to the number of available cores
    packager: yarn # Specify a packager, 'npm' or 'yarn'. Defaults to 'npm'.
    forceInclude:
      - pdfkit
    rawFileExtensions:
      - afm
    externals:
      - pdfkit

functions:
  getSignedUrl:
    handler: functions/get-signed-url/handler.main
    environment:
      AWS_BUCKET_NAME: assets.ts-ai-kitkhe.ge
    events:
      - httpApi:
          method: POST
          path: /books/{id}/pages/signed-url
          authorizer:
            name: adminJWTAuthorizer

  booksGet:
    handler: functions/books-get/handler.main
    environment:
      DYNAMO_DB_BOOKS_TABLE_NAME: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}
    events:
      - httpApi:
          method: GET
          path: /books/{id}

  booksGetAll:
    handler: functions/books-get-all/handler.main
    environment:
      DYNAMO_DB_BOOKS_TABLE_NAME: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}
    events:
      - httpApi:
          method: GET
          path: /books

  booksGetAllAdmin:
    handler: functions/books-get-all-admin/handler.main
    environment:
      DYNAMO_DB_BOOKS_TABLE_NAME: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}
    events:
      - httpApi:
          method: GET
          path: /admin/books
          authorizer:
            name: adminJWTAuthorizer

  booksCreate:
    handler: functions/books-create/handler.main
    environment:
      DYNAMO_DB_BOOKS_TABLE_NAME: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}
    events:
      - httpApi:
          method: POST
          path: /books
          authorizer:
            name: adminJWTAuthorizer

  booksUpdate:
    handler: functions/books-update/handler.main
    environment:
      DYNAMO_DB_BOOKS_TABLE_NAME: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}
      S3_ASSETS_BUCKET_NAME: ${self:custom.S3_ASSETS_BUCKET_NAME}
    events:
      - httpApi:
          method: PATCH
          path: /books/{id}
          authorizer:
            name: adminJWTAuthorizer

  booksDelete:
    handler: functions/books-delete/handler.main
    environment:
      DYNAMO_DB_BOOKS_TABLE_NAME: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}
    events:
      - httpApi:
          method: DELETE
          path: /books/{id}
          authorizer:
            name: adminJWTAuthorizer

  booksSeeder:
    handler: functions/books-seeder/handler.main
    environment:
      DYNAMO_DB_BOOKS_TABLE_NAME: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}

  authorsGetAll:
    handler: functions/authors-get-all/handler.main
    environment:
      DYNAMO_DB_BOOKS_TABLE_NAME: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}
    events:
      - httpApi:
          method: GET
          path: /authors

  pagesGetAll:
    handler: functions/pages-get-all/handler.main
    environment:
      AWS_BUCKET_NAME: assets.ts-ai-kitkhe.ge
      DYNAMO_DB_PAGES_TABLE_NAME: ${self:custom.DYNAMO_DB_PAGES_TABLE_NAME}
    events:
      - httpApi:
          method: GET
          path: /admin/books/{id}/pages
          authorizer:
            name: adminJWTAuthorizer

  pagesDelete:
    handler: functions/pages-delete/handler.main
    environment:
      AWS_BUCKET_NAME: assets.ts-ai-kitkhe.ge
    events:
      - httpApi:
          method: DELETE
          path: /admin/books/{id}/pages/{filename}
          authorizer:
            name: adminJWTAuthorizer

  pagesUpdate:
    handler: functions/pages-update/handler.main
    environment:
      DYNAMO_DB_PAGES_TABLE_NAME: ${self:custom.DYNAMO_DB_PAGES_TABLE_NAME}
    events:
      - httpApi:
          method: PATCH
          path: /admin/books/{id}/pages
          authorizer:
            name: adminJWTAuthorizer

  pagesTableStream:
    handler: functions/pages-table-stream/handler.main
    environment:
      DYNAMO_DB_BOOKS_TABLE_NAME: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}
      DYNAMO_DB_PAGES_TABLE_NAME: ${self:custom.DYNAMO_DB_PAGES_TABLE_NAME}
      S3_ASSETS_BUCKET_NAME: assets.ts-ai-kitkhe.ge
      AWS_BUCKET_NAME: assets.ts-ai-kitkhe.ge
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [pagesTable, StreamArn]
          maximumRetryAttempts: 2

resources:
  Resources:
    booksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DYNAMO_DB_BOOKS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    pagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DYNAMO_DB_PAGES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE

  Outputs:
    PagesGetAllLambdaArn:
      Value:
        Fn::GetAtt: PagesGetAllLambdaFunction.Arn
      Export:
        Name: PagesGetAllLambdaArn

plugins:
  - serverless-bundle
